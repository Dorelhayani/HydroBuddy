void SM() {
  switch (CurrentStatus) {
    default:
      CurrentStatus = GetState();
      break;

// Temperatue Mode 
// ==============================================================================================
    case TEMP_MODE:
      CurrentTemp = dht.readTemperature();
      light = map(analogRead(lightSensor), 0, 4095, 0, 100);

      if ((millis() - DataPullTime) > (1 * minutes)) {
        deserializeJson(doc, getJsonData("temp"));
        temp = (float)doc["temp"];
        minTime = doc["minTime"];
        maxTime = doc["maxTime"];
        DataPullTime = millis();
      }

      if (light > 70) { isPumpON = true; } 
      else if (light < 10 && countON == 2) {
        isPumpON = true;
        countON = 0;
      }

      if (isPumpON && temp < CurrentTemp && countON < 2 && light < 40) {
        digitalWrite(pump, LOW);
        if (millis() - activationTime > (maxTime * minutes)) {
          digitalWrite(pump, HIGH);
          Serial.println("pump OFF");
          isPumpON = false;
          countON++;
          activationTime = millis();
        }
      } else if (isPumpON && countON < 2) {
        digitalWrite(pump, LOW);
        if (millis() - activationTime > (minTime * minutes)) {
          digitalWrite(pump, HIGH);
          isPumpON = false;
          countON++;
          activationTime = millis();
        }
      }
      Serial.println("");
      Serial.println("countON = " + String(countON));
      Serial.println("isPumpON = " + String(isPumpON));
      break;
// ==============================================================================================

// Soil Moisture Mode
// ==============================================================================================
    case SOIL_MOISTURE_MODE:
      CurrentTemp = dht.readTemperature();
      moisture = map(analogRead(MoistureSensore), 0, 4095, 0, 100);

      if ((millis() - DataPullTime) > (1 * minutes)) {
        deserializeJson(doc, getJsonData("moisture"));
        moisture = (int)doc["moisture"];
        minMoisture = doc["minTime"];
        maxMoisture = doc["maxTime"];
        DataPullTime = millis();
      }

      if (moisture > minMoisture) { isPumpON = true; } 
      else if (moisture < maxMoisture) { isPumpON = true; }
 
      if (isPumpON) {
        digitalWrite(pump, LOW);
        if (millis() - activationTime > (maxTime * minutes)) {
          digitalWrite(pump, HIGH);
          isPumpON = false;
          activationTime = millis();
        }
      }
      break;
// ==============================================================================================

// Saturday Mode
// ==============================================================================================
    case SATURDAY_MODE:
      struct tm timeinfo;
      if (getLocalTime(&timeinfo)) {
        currentHour = timeinfo.tm_hour;
        currentMinute = timeinfo.tm_min;
      }

      if ((millis() - DataPullTime) > (0 * minutes)) {
        deserializeJson(doc, getJsonData("SATURDAY_MODE"));

        scheduledHour = doc["SATURDAY_MODE"]["hour"];
        scheduledMinute = doc["SATURDAY_MODE"]["minute"];
        duration = doc["SATURDAY_MODE"]["duration"];

        DataPullTime = millis();
        matchTime = ((scheduledHour == currentHour) && (scheduledMinute == currentMinute));

        if (!matchTime) {
          if (millis() - activationTime > (duration * minutes)) {
            digitalWrite(pump, HIGH);
            activationTime = millis();
          }
        } else digitalWrite(pump, LOW);
      }
      break;
// ==============================================================================================

// Manual Mode
// ==============================================================================================
    case MANUAL_MODE:
      if ((millis() - DataPullTime) > (0 * minutes)) {
        String Res = getJsonData("MANUAL_MODE");

        deserializeJson(doc, Res);
        manual = doc["MANUAL_MODE"]["enabled"];
        DataPullTime = millis();
        if (manual) {
          if ((millis() - dealyTime) > (trigerTime)) digitalWrite(pump, LOW);
        } else { digitalWrite(pump, HIGH); }
      }
      break;
  }
}
// ==============================================================================================
