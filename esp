#include <DHT.h>
#include <ArduinoJson.h>
#include <time.h>

const char* ntpServer = "il.pool.ntp.org";
const char* timeZone = "IST-2IDT,M3.4.4/26,M10.5.0";  // שעון קיץ ישראל

// pins
// -------------------------------------
#define pump 19
#define dhtPin 16
#define MoistureSensore 32
#define lightSensor 33
// -------------------------------------


// General data
// -------------------------------------
// #define DHTTYPE DHT11
#define DHTTYPE DHT22
DHT dht(dhtPin, DHTTYPE);

JsonDocument doc;

float CurrentTemp;
float temp;
int light;

int moisture;
int minMoisture, maxMoisture;
int moistureLVL;
bool isValidMoisture;

int minutes = (1000 * 60);
int minTime, maxTime;

bool isPumpON;
bool manual;
int countON = 0;

unsigned long lastSentDataTime;

const char* TimeActivate;
int currentHour;
int currentMinute;
bool matchTime;
int scheduledHour;
int scheduledMinute;
int duration;

// State Machine
// -------------------------------------
#define TEMP_MODE 61
#define SOIL_MOISTURE_MODE 62
#define SATURDAY_MODE 63
#define MANUAL_MODE 64
int CurrentStatus;
unsigned long statusCheckTime;
unsigned long DataPullTime;  // בודק כל זמן מסוים יש עדכנוים מהלקוח
unsigned long activationTime;
unsigned long dealyTime;
int trigerTime = 300;
// -------------------------------------

void setup() {
  pinMode(pump, OUTPUT);
  Serial.begin(115200);
  WiFi_Setup();
  dht.begin();
  isPumpON = true;
  statusCheckTime = millis();

  configTzTime(timeZone, ntpServer);
  waitForTimeSync();
}

void loop() {
  if (millis() - statusCheckTime > (1 * minutes)) {
    CurrentStatus = GetState();
    statusCheckTime = millis();
  }

  dataMode(CurrentStatus);

  if ((millis() - lastSentDataTime) > (1 * minutes)) {
    Serial.println("📤 Sending Data...");
    SendData(CurrentTemp, light, moisture);
    // if(CurrentTemp > 0 && light > 0 ) { SendToDatasensors(CurrentTemp, light, moisture, String(isPumpON ? 1 : 0)); }   // לבידקה אחר כך
    SendToDatasensors(CurrentTemp, light, moisture, String(isPumpON ? 1 : 0));
    lastSentDataTime = millis();
  }

  SM();
  StateMachinePrint();
  delay(2000);
}

void parseTimeString(const char* timeStr, int& hour, int& minute) {
  char timeCopy[6];
  strncpy(timeCopy, timeStr, sizeof(timeCopy));
  timeCopy[5] = '\0';

  char* token = strtok(timeCopy, ":");
  if (token) hour = atoi(token);

  token = strtok(NULL, ":");
  if (token) minute = atoi(token);
}

void waitForTimeSync() {
  struct tm timeinfo;
  while (!getLocalTime(&timeinfo)) { Serial.println("⏳ Waiting for NTP time..."); }
  Serial.println("✅ Time synchronized!");
}
